{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//initial state\nconst initialState = {\n  name: \"\",\n  age: null,\n  password: null\n}; //action creator\n\nconst changeNickname = () => {\n  return {\n    type: \"CHANGE_NAME\"\n  };\n}; // (이전상태, 액션) => 다음상태 를 만들어내는 함수\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHANGE_NAME\":\n      return _objectSpread({}, state);\n\n    default:\n      break;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/yesang-gi/Desktop/workspace/nodebird/front/reducers/index.js"],"names":["initialState","name","age","password","changeNickname","type","rootReducer","state","action"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,GAAG,EAAE,IAFc;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB,C,CAMA;;AACA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACH,IAAf;AACE,SAAK,aAAL;AACE,+BACKE,KADL;;AAIF;AACE;AAPJ;AASD,CAVD;;AAYA,eAAeD,WAAf","sourcesContent":["//initial state\nconst initialState = {\n  name: \"\",\n  age: null,\n  password: null,\n};\n\n//action creator\nconst changeNickname = () => {\n  return {\n    type: \"CHANGE_NAME\",\n  };\n};\n\n// (이전상태, 액션) => 다음상태 를 만들어내는 함수\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHANGE_NAME\":\n      return {\n        ...state,\n      };\n\n    default:\n      break;\n  }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}