{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//initial state\nconst initialState = {\n  user: {\n    isLoggedInf: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; //action creator\n\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NAME\",\n    data\n  };\n}; // (이전상태, 액션) => 다음상태 를 만들어내는 함수\n\n\nconst rootReducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case \"CHANGE_NAME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.data\n      });\n\n    default:\n      break;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/yesang-gi/Desktop/workspace/nodebird/front/reducers/index.js"],"names":["initialState","user","isLoggedInf","signUpData","loginData","post","mainPosts","changeNickname","data","type","rootReducer","state","action","console","log","name"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,KADT;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB,C,CAYA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE,aADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACH,IAAnB;;AACA,UAAQG,MAAM,CAACH,IAAf;AACE,SAAK,aAAL;AACE,6CACKE,KADL;AAEEI,QAAAA,IAAI,EAAEH,MAAM,CAACJ;AAFf;;AAKF;AACE;AARJ;AAUD,CAZD;;AAcA,eAAeE,WAAf","sourcesContent":["//initial state\nconst initialState = {\n  user: {\n    isLoggedInf: false,\n    user: null,\n    signUpData: {},\n    loginData: {},\n  },\n  post: {\n    mainPosts: [],\n  },\n};\n\n//action creator\nconst changeNickname = (data) => {\n  return {\n    type: \"CHANGE_NAME\",\n    data,\n  };\n};\n\n// (이전상태, 액션) => 다음상태 를 만들어내는 함수\nconst rootReducer = (state = initialState, action) => {\n  console.log(action.type);\n  switch (action.type) {\n    case \"CHANGE_NAME\":\n      return {\n        ...state,\n        name: action.data,\n      };\n\n    default:\n      break;\n  }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}