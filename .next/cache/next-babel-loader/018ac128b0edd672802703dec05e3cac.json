{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\nvar initialState = {}; // (이전상태, 액션) => 다음상태 를 만들어내는 함수\n// const rootReducer = (state = initialState, action) => {\n// };\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(HYDRATE, action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/yesang-gi/Desktop/workspace/nodebird/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,YAAY,GAAG,EAArB,C,CAEA;AACA;AAEA;;AAEA,IAAMC,WAAW,GAAGJ,eAAe,CAAC;AAClCK,EAAAA,KAAK,EAAE,iBAAgB;AAAA,QAAfC,KAAe,uEAAP,EAAO;;AACrB,YAAQC,MAAM,CAACC,IAAf;AACE,WAAKT,OAAL;AACEU,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ,EAAqBQ,MAArB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEF;AACE,eAAOL,KAAP;AANJ;AAQD,GAViC;AAWlCL,EAAAA,IAAI,EAAJA,IAXkC;AAYlCC,EAAAA,IAAI,EAAJA;AAZkC,CAAD,CAAnC;AAeA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n\nconst initialState = {};\n\n// (이전상태, 액션) => 다음상태 를 만들어내는 함수\n// const rootReducer = (state = initialState, action) => {\n\n// };\n\nconst rootReducer = combineReducers({\n  index: (state = {}) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(HYDRATE, action);\n        return { ...state, ...action.payload };\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}